jobs:
- job: 'build'
  pool: 'Win-CPU-2019'
  variables:
    OrtPackageId: 'Microsoft.ML.OnnxRuntime'
    MsbuildArguments: '-maxcpucount'
    OnnxRuntimeBuildDirectory: '$(Build.BinariesDirectory)'
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    EnvSetupScript: setup_env.bat
    buildArch: x64
    BuildConfig: 'Debug'
    setVcvars: true    
  timeoutInMinutes: 90
  workspace:
    clean: all
  steps:    
  - task: UsePythonVersion@0
    inputs: 
      versionSpec: '3.7' 
      addToPath: true 
      architecture: $(buildArch)

  - task: BatchScript@1
    displayName: 'setup env'
    inputs:
      filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\$(EnvSetupScript)'
      modifyEnvironment: true
      workingFolder: '$(Build.BinariesDirectory)'

  - script: |
     python -m pip install -q pyopenssl setuptools wheel numpy     
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Install python modules'

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 4.9
    inputs:
      versionSpec: 4.9.4

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      command: 'restore'
      feedsToUse: 'config'
      restoreSolution: '$(Build.SourcesDirectory)\packages.config'
      nugetConfigPath: '$(Build.SourcesDirectory)\NuGet.config'
      restoreDirectory: '$(Build.BinariesDirectory)\$(BuildConfig)'

  - task: PythonScript@0
    displayName: 'Generate cmake config'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\build.py'
      arguments: '--config $(BuildConfig) --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --update --cmake_generator "Visual Studio 16 2019" --enable_onnx_tests --use_vstest'
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: VSBuild@1
    displayName: 'Build'
    inputs:
      solution: '$(Build.BinariesDirectory)\$(BuildConfig)\onnxruntime.sln'
      platform: 'x64'
      configuration: $(BuildConfig)
      msbuildArgs: $(MsbuildArguments)
      msbuildArchitecture: $(buildArch)
      maximumCpuCount: true
      logProjectEvents: false
      workingFolder: '$(Build.BinariesDirectory)\$(BuildConfig)'
      createLogFile: true

  - template: templates/set-test-data-variables-step.yml

  - task: PythonScript@0
    displayName: 'Download test data'
    inputs:
      scriptPath: '$(Build.SourcesDirectory)\tools\ci_build\github\download_test_data.py'
      arguments: --test_data_url $(TestDataUrl) --build_dir $(Build.BinariesDirectory)
      workingDirectory: $(Build.BinariesDirectory)
 
  - task: BatchScript@1
    displayName: 'Setup VS2019 env vars'
    inputs:
      filename: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat'
      arguments: $(buildArch)
      modifyEnvironment: true

  - script: |
     set PATH=$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig);%PATH%
     mklink  /D /J $(Build.BinariesDirectory)\$(BuildConfig)\models $(Build.BinariesDirectory)\models

  - task: VSTest@2
    displayName: 'VsTest - testAssemblies'
    inputs:
      testAssemblyVer2: 'onnxruntime_test_all.exe'
      searchFolder: '$(Build.BinariesDirectory)\Debug\Debug'
      runSettingsFile: 'cmake\\codeconv.runsettings'
      pathtoCustomTestAdapters: '$(Build.BinariesDirectory)\Debug\googletestadapter.0.17.1\build\_common'
      codeCoverageEnabled: true
      platform: x64 

  - task: PublishTestResults@2
    inputs:  
      searchFolder: '$(Build.BinariesDirectory)\$(BuildConfig)\$(BuildConfig)\TestResults'
      testResultsFormat: 'VSTest'
      testResultsFiles: '**'
    condition: succeededOrFailed()

  - template: templates/component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

  - template: templates/clean-agent-build-directory-step.yml
   
